# grep 'Password:' /etc/gitlab/initial_root_password
# root/password

services:
  # Gitlab
  gitlab:
    image: gitlab/gitlab-ce:17.6.1-ce.0
    restart: always
    cap_add:
      - NET_ADMIN   # Add network administration capabilities
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost/-/readiness?all=1 || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 20s
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://gitlab.berte-edu.ru'
        registry_external_url "https://registry.berte-edu.ru"
        pages_external_url "https://pages.berte-edu.ru"
        letsencrypt['enable'] = false
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        nginx['redirect_http_to_https'] = false
        nginx['client_max_body_size'] = '0'
        pages_nginx['listen_https'] = false
        pages_nginx['redirect_http_to_https'] = false
        registry['registry_http_addr'] = "gitlab:5000"
        registry_nginx['listen_https'] = false
        registry_nginx['redirect_http_to_https'] = false
        registry_nginx['client_max_body_size'] = '0'
        gitlab_rails['gitlab_shell_ssh_port'] = 22
        gitlab_rails['monitoring_whitelist'] = ['127.0.0.0/8', '::1/128']
        gitlab_rails['backup_keep_time'] = 604800
        gitlab_pages['inplace_chroot'] = true
    volumes:
      - ./data/gitlab/configs:/etc/gitlab
      - ./data/gitlab/logs:/var/log/gitlab
      - ./data/gitlab/data:/var/opt/gitlab
      - ./config/certbot/conf:/etc/letsencrypt
  gitlab-runner:
    image: gitlab/gitlab-runner:alpine
    restart: always
    depends_on:
      - gitlab
    healthcheck:
      test: [ "CMD", "gitlab-runner", "verify", "--delete" ]
      interval: 2m       # How often to run the check
      timeout: 10s          # Maximum time to allow the command to run
      retries: 3            # Number of retries before marking as unhealthy
      start_period: 40s     # Time before starting the first health check
    environment:
      TZ: UTC
    volumes:
      - ${DOCKER_SOCKET}:/var/run/docker.sock
      - ./config/gitlab_runner/config.toml:/etc/gitlab-runner/config.toml
      - cache:/cache/gitlab
      - certs:/certs/client
      - runner-conf:/etc/gitlab-runner

  # Sonar
  sonar:
    image: sonarqube:community
    restart: always
    depends_on:
      - sonar_db
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:9000 || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 20s
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - ./data/sonar/data:/opt/sonarqube/data
      - ./data/sonar/extensions:/opt/sonarqube/extensions
      - ./data/sonar/logs:/opt/sonarqube/logs
  sonar_db:
    image: postgres:16.3
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "sonar" ]
      interval: 30s       # Check every 30 seconds
      timeout: 10s        # Wait for 10 seconds before timing out
      retries: 5          # Retry up to 5 times before marking as unhealthy
      start_period: 30s   # Wait 30 seconds before starting health checks
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    command: postgres -c shared_preload_libraries='pg_stat_statements'
    volumes:
      - ./data/postgresql/data:/var/lib/postgresql/data

  # Rancher
  rancher:
    image: rancher/rancher:v2.9.2
    privileged: true
    restart: always
    healthcheck:
      test: "curl -f  http://localhost:80/v1/health || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 20s
    environment:
      SSL_CERT_DIR: /var/certificates
    volumes:
      - ./data/rancher/data:/var/lib/rancher
      - ./config/certbot/conf/live/berte-edu.ru-0001/:/var/certificates

  # Reverse proxy
  nginx:
    image: nginx
    restart: always
    healthcheck:
      test: "curl -f http://localhost:80 || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 20s
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - gitlab
      - sonar
      - rancher
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/index.html:/var/lib/site/index.html
      - ./config/certbot/www:/var/www/certbot
      - ./config/certbot/conf:/etc/letsencrypt
      - ./config/certbot/logs:/var/log/letsencrypt
  # Keys
  certbot:
    image: certbot/certbot
    cap_add:
      - NET_ADMIN   # Add network administration capabilities
    volumes:
      - ./config/certbot/www:/var/www/certbot
      - ./config/certbot/conf:/etc/letsencrypt
      - ./config/certbot/logs:/var/log/letsencrypt
    healthcheck:
      test: "exit 0" # TODO: change healthcheck, now inconsistent
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  runner-conf: {}
  cache: {}
  certs: {}

networks:
  default:
    name: vpn_docker # should be subnet 172.21.0.0
    external: true
